late String description;

void main() {
  // 1. 变量
  // -- var：自动推断类型String
  var name1 = 'Bob';
  // -- 如果一个对象不受限于单一类型，可以指定为 Object 类型（或在必要时使用 dynamic）
  Object name2 = 'Bob';
  // -- 显式声明将要被推断的类型
  String name3 = 'Bob';
  print('$name1, $name2, $name3');

  // 2. 空安全
  // a. 为变量、参数或另一个相关组件指定类型时,可以在类型声明的末尾添加 ?
  int? age;
  print(age);
  // b. 必须在使用变量之前对其进行初始化
  // c. 不能在可空类型的表达式上访问属性或调用方法

  // 3. 默认值，具有可空类型的未初始化变量的初始值为 null 。

  // 4. 延迟初始化变量，如果你确定变量在使用之前已设置，但 Dart 推断错误的话，可以将变量标记为 late

  // 5. 终值 (final) 和常量 (const)
  /**
   * final
   * a. 不可重新赋值：使用 final 定义的变量只能被赋值一次，之后不能再改变。
   * b. 运行时初始化：final 变量是在运行时初始化的。也就是说，变量的值在程序执行时才确定，而不需要在编译时就知道。
   * 
   * const
   * a. 编译时常量：使用 const 定义的变量必须在编译时就能确定其值。也就是说，const 变量的值必须是编译时常量，而不是运行时的计算结果。
   * b. 不可变对象：使用 const 定义的对象不仅本身不可变，且其内容（如果是集合或对象）也是不可变的。
   * c. 可以用于定义常量表达式：const 可以定义常量表达式，常量表达式可以在类中作为静态成员使用。
   * 
   * 总结区别
   * 	•	final：值在运行时确定，定义后不能修改。
   *  •	const：值在编译时确定，且对象和其内部内容都不可改变。
   * 
   * 适用场景：
   * •	当你需要一个值在运行时确定并且之后不可变时，使用 final。
   * •	当你需要一个编译时常量或定义不可变的对象时，使用 const。
   * 
   */
}
